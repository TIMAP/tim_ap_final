<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.tim.ap.mapper.MemberMapper">

	<resultMap type="com.tim.ap.entity.MemberEntity" id="MemberResultMap">
		<result property="id" column="ID" />
		<result property="email" column="EMAIL" />
		<result property="pw" column="PW" />
		<result property="name_last" column="NAME_LAST" />
		<result property="name_first" column="NAME_FIRST" />
		<result property="role" column="ROLE" />
		<result property="auth" column="AUTH" />
		<result property="disabled" column="DISABLED" />
	</resultMap>

	<sql id="searchFrag">
			<if test="searchType != null">
			<choose>
		    <when test='searchType == "mail"'>
		    	AND EMAIL LIKE CONCAT('%', #{searchWord}, '%')
		    </when>
		    <when test='searchType == "namelast"'>
		    	AND NAME_LAST LIKE CONCAT('%', #{searchWord}, '%')
		    </when>
		    <when test='searchType == "namefirst"'>
		    	AND NAME_FIRST LIKE CONCAT('%', #{searchWord}, '%')
		    </when>
		    <when test='searchType == "role"'>
		    	AND ROLE LIKE CONCAT('%', #{searchWord}, '%')
		    </when>
		    <when test='searchType == "auth"'>
		    	AND AUTH LIKE CONCAT('%', #{searchWord}, '%')
		    </when>
	</choose>
	</if>
	</sql>
	<select id="getMemberList" parameterType="com.tim.ap.entity.PaginationInfoEntity" resultType="com.tim.ap.entity.MemberEntity">
		SELECT B.*
		FROM (
		SELECT A.*,@ROWNUM := @ROWNUM + 1 AS RNUM
	
		FROM (
		SELECT 
			ID,
			EMAIL,
			PW,
			NAME_LAST,
			NAME_FIRST,
			ROLE,
			AUTH
		FROM MEMBER
		WHERE (@ROWNUM :=0)=0
		AND ROLE = "N"
		<include refid="searchFrag"/>
		)AS A
		)AS B
		 <![CDATA[
			WHERE RNUM >= #{startRow} AND RNUM <= #{endRow}
			]]>
	</select>

	<select id="selectMemberListTotalCount" resultType="java.lang.Integer" parameterType="com.tim.ap.entity.PaginationInfoEntity">
		SELECT COUNT(*) FROM MEMBER
		WHERE 1=1
		AND ROLE = "N"
			<include refid="searchFrag"/>
	</select>

	<select id="getMember" parameterType="java.lang.Integer" resultType="com.tim.ap.entity.MemberEntity">
		select * from member
		where id = #{id}
	</select>
	
	<insert id="insertMember" parameterType="com.tim.ap.entity.MemberEntity">
		INSERT INTO MEMBER(ID, EMAIL, PW, NAME_LAST, NAME_FIRST)
		VALUES(#{id}, #{email}, #{pw}, #{name_last}, #{name_first})
	</insert>
	<insert id="addMember" parameterType="com.tim.ap.entity.MemberEntity">
		INSERT INTO MEMBER(ID, EMAIL, PW, NAME_LAST, NAME_FIRST,AUTH)
		VALUES(#{id}, #{email}, #{pw}, #{name_last}, #{name_first},#{auth})
	</insert>
	
	<update id="updateMember" parameterType="com.tim.ap.entity.MemberEntity">
		UPDATE MEMBER SET PW = #{pw} WHERE ID = #{id}
	</update>
	
	<update id="managementMember" parameterType="com.tim.ap.entity.MemberEntity">
		UPDATE MEMBER SET EMAIL=#{email}, 
						  PW = #{pw}, 
						  NAME_LAST= #{name_last},
						  NAME_FIRST = #{name_first},
						  ROLE = #{role}, 
						  AUTH = #{auth}
		WHERE ID = #{id} 
	</update>
	
	<update id="deleteMember">
		UPDATE MEMBER SET DISABLED = 'Y' WHERE ID = #{id}
	</update>
	
	<insert id="excelUpload" parameterType="java.util.List">
		INSERT INTO MEMBER(ID, EMAIL, PW, NAME_LAST, NAME_FIRST, ROLE , AUTH , DISABLED)
		VALUES
		<foreach item="item" index="index" collection="list" separator=",">
		(#{item.id}, #{item.email}, #{item.pw}, #{item.name_last}, #{item.name_first}, #{item.role} , #{item.auth} , #{item.disabled})
		</foreach>
	</insert>
	
	<insert id="csvInsert" parameterType="java.util.List">
		INSERT INTO MEMBER(ID, EMAIL, PW, NAME_LAST, NAME_FIRST, ROLE , AUTH , DISABLED)
		VALUES
		<foreach item="item" index="index" collection="list" separator=",">
		(#{item.id}, #{item.email}, #{item.pw}, #{item.name_last}, #{item.name_first}, #{item.role} , #{item.auth} , #{item.disabled})
		</foreach>
	</insert>

	<select id="checkExist" parameterType="java.util.List" resultType="com.tim.ap.entity.MemberEntity">
		SELECT ID FROM MEMBER
		WHERE ID IN
		<foreach collection="list" item="item" index="index" open="(" separator="," close=")">
			#{item.id}
		</foreach>
	</select>
<!-- 	<delete id="deleteMember"> -->
<!-- 		DELETE FROM MEMBER WHERE ID = #{id} -->
<!-- 	</delete> -->
</mapper>
